openapi: 3.0.0
info:
  title: Market Data API
  version: 'v3'
  x-logo:
    url: 'https://docs.bravenewcoin.com/images/logo.png'
    altText: 'Brave New Coin'
  contact:
    name: Brave New Coin
servers:
  - url: 'https://api.bravenewcoin.com/{basePath}'
    description: Production API Server
    variables:
      basePath:
        default: v3
components:
  securitySchemes:
    auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://api.bravenewcoin.com/v3/oauth/token'
          scopes:
            read:exchange-ticker: Read the latest exchange ticker
            read:index-ticker: Read the historical index tickers
            read:ohlcv: Read end of day open, high, low, close and volume
            read:market-cap: Read the market capatilization
            read:LX: Read historical LX index tickers and end of day open, high, low, close and volume
  schemas:
    Error:
      type: object
      properties:
        status:
          description: The status of the error.
          type: string
        timestamp:
          description: The timestamp of the error.
          type: string
          format: date-time
        message:
          description: description of error.
          type: string
        errors:
          description: A list of errors.
          type: array
          items:
            type: object
            properties:
              object:
                description: The object that caused the error.
                type: string
              field:
                description: The field that caused the error.
                type: string
              rejectedValue:
                description: The value which caused the error.
                type: string
              message:
                description: A message which usually provides a hint on how to resolve the error.
                type: string
    Asset:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        name:
          description: The friendly name of the asset.
          type: string
        symbol:
          description: The ticker symbol of the asset.
          type: string
        status:
          description: The status of the asset.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        type:
          description: Indicator for the type of the asset.
          type: string
          enum:
            - FIAT
            - CRYPTO
        url:
          description: The url of where information about the asset can be found.
          type: string
    Market:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        baseAssetId:
          description: The base asset id which makes up the market
          type: string
          format: uuid
        quoteAssetId:
          description: The quote asset id which makes up the market
          type: string
          format: uuid
    Exchange:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        name:
          description: The name of the exchange
          type: string
        url:
          description: The URL of the exchange
          type: string
        status:
          description: The status of the exchange
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - MAINTENANCE
        markets:
          description: The markets available on the exchange
          type: array
          items:
            type: object
            properties:
              marketId:
                description: The market id
                type: string
                format: uuid
              marketStatus:
                description: The status of the market on the exchange
                type: string
                enum:
                  - ACTIVE
                  - INACTIVE
              qualified:
                description: Indicates if the market on the exchange contributes to the BNC indices
                type: string
                enum:
                  - YES
                  - NO
        symbols:
          description: Mapping for asset symbols identifying an exchange's markets that differ from generally accepted usage
          type: array
          items:
            type: object
            properties:
              assetId:
                description: The asset id
                type: string
                format: uuid
              symbol:
                description: The asset symbol used by the exchange
                type: string
    Tick:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        exchangeId:
          description: Unique identifier for the exchange.
          type: string
          format: uuid
        marketId:
          description: Unique identifier for the market.
          type: string
          format: uuid
        last:
          description: The last traded price at the timestamp in the quote asset.
          type: string
        volume:
          description: The volume of the base asset in the last 24 hours.
          type: string
        bid:
          description: 'The bid price in the quote asset.'
          type: string
        ask:
          description: 'The ask price in the quote asset.'
          type: string
        timestamp:
          description: The timestamp from when the market data was collected from the exchange.
          type: string
          format: date-time
    IndexTicker:
      type: object
      properties:
        indexId:
          description: Unique identifier for the constituent used to calculate the index. Or a unique ID for the index in the case of LX indices.
          type: string
          format: uuid
        indexType:
          description: The type of the index
          type: string
          enum:
            - MWA
            - GWA
            - LX
        price:
          description: The calculated price.
          type: string
        timestamp:
          description: The timestamp the marketed weighted average was calculated.
          type: string
          format: date-time
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        volume:
          description: The calculated volume in the last 24 hours.
          type: string
        tickVolume:
          description: The calculated volume in the tick. Only for LX 30 second ticks.
          type: string
    OpenHighLowCloseVolume:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        indexId:
          description: Unique identifier for the constituent used to calculate the index. Or a unique ID for the index in the case of LX indices.
          type: string
          format: uuid
        indexType:
          description: The index type of the OHLCV
          required: true
          type: string
          enum:
            - MWA
            - GWA
            - LX
        open:
          description: The opening price of the index for the 24h period
          type: string
        close:
          description: The closing price of the index for the 24h period
          type: string
        high:
          description: The high price of the index for the 24h period
          type: string
        low:
          description: The low price of the index for the 24h period
          type: string
        volume:
          description: The 24h volume
          type: string
        volumeUsd:
          description: The 24h volume in USD
          type: string
        vwap:
          description: The 24h volume-weighted average price of the index
          type: string
        twap:
          description: The 24h time-weighted average price of the index
          type: string
        startTimestamp:
          description: The date and time for the start of the OHLCV period
          type: string
          format: date-time
        endTimestamp:
          description: The date and time for the end of the OHLCV period
          type: string
          format: date-time

    MarketCapPercentChange:
      type: object
      description: The percent change over a period of time.
      properties:
        change24h:
          description: Percentage change for the 24 hour period.
          type: string
        change7d:
          description: Percentage change for the 7 day period.
          type: string
        change30d:
          description: Percentage change for the 30 day period.
          type: string
    MarketCap:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        assetId:
          description: The asset id
          type: string
          format: uuid
        timestamp:
          description: The timestamp the market capitalisation was calculated.
          type: string
          format: date-time
        marketCapRank:
          description: The market cap ranking order.
          type: string
        volumeRank:
          description: The 24hr volume ranking order.
          type: string
        price:
          description: The global weighted average price of the asset in USD.
          type: string
        volume:
          description: The total global weighted average 24h volume of the asset.
          type: string
        totalSupply:
          description: The total supply of the asset.
          type: string
        freeFloatSupply:
          description: The circulating supply of the asset. It is the total supply less any supply that has been removed from circulation.
          type: string
        marketCap:
          description: Market cap in USD based on the price and the free float supply.
          type: string
        totalMarketCap:
          description: USD market cap figure based on total supply.
          type: string
        marketCapPercentChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
        totalMarketCapPercentChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
        volumePercentChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
        pricePercentChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
  parameters:
    idParam:
      name: id
      in: path
      required: true
      description: The unique resource identifier
      schema:
        type: string
        format: uuid
  responses:
    Error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
x-tagGroups:
  - name: Overview
    tags:
      - Introduction
      - Authentication
      - IDs
      - Pagination
      - Timezones
      - Support
      - Versioning

  - name: Quickstart
    tags:
      - GWA
      - MWA

  - name: Rest API
    tags:
      - Rest API Overview
      - Rest API Errors
      - Asset
      - Market
      - Exchange
      - XchangeFeed
      - GWA / MWA / LX
      - Market Cap

  - name: Websocket API
    tags:
      - Websocket Overview
      - Websocket Errors
      - Websocket XchangeFeed
      - Websocket LX
      - Websocket GWA / MWA
tags:
  - name: GWA
    description: |
      ### Global weighted average Spot Rates:
      The Global Weighted Average for an asset, say Litecoin (LTC), can be obtained by passing the indexType query parameter as GWA and indexId as the Asset Id(UUID) for LTC.

      You can find detailed explanation under:
      * [GWA](#tag/GWA-MWA)

      In order to get the Asset Id(UUID) for LTC, you need to query the Asset API:
      * [Asset](#tag/Asset)

      ```
      curl https://api.bravenewcoin.com/v3/asset?symbol=LTC
      ```
      ### Example API call for GWA Intraday LTC:
      To request LTC index tickers with a timestamp before `17th March 2020`.
      ```
      curl https://api.bravenewcoin.com/v3/index-ticker?timestamp=2020-03-17T00:00:00.000Z&indexType=GWA&indexId=220cbd0c-e466-4a75-9833-755307f872f3 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G
      ```

      ### Example API call for GWA Open, High, Low, Close, Volume for LTC:
      ```
      curl https://api.bravenewcoin.com/v3/ohlcv?timestamp=2019-09-25T00:00:00.000Z&indexType=GWA&indexId={LTC_Asset_Id} -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G
      ```

  - name: MWA
    description: |
      ### Market Weighted Average Reference Rates:
      The Market weighted average for a market, say BTC/USD (base/quote) can be obtained by passing the indexType query parameter as MWA and indexId as the Market Id(UUID) for BTC/USD.

      You can find detailed explanation under:
      * [MWA](#tag/GWA-MWA)

      In order to get the Market Id(UUID) for BTC/USD, you need to query the Market API:
      * [Market](#tag/Market)

      ```
      curl https://api.bravenewcoin.com/v3/market?baseAssetId={BTC_Asset_Id}&quoteAssetId={USD_Asset_Id}
      ```
      The respective asset Ids can be obtained by querying the Asset API as shown in the GWA section.

      ### Example API call for MWA Intraday BTC/USD:
      ```
      curl https://api.bravenewcoin.com/v3/index-ticker?timestamp=2019-09-25T00:00:00.000Z&indexType=MWA&indexId={BTC_USD_Market_Id} -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G
      ```

      ### Example API call for MWA Open, High, Low, Close, Volume for BTC/USD:
      ```
      curl https://api.bravenewcoin.com/v3/ohlcv?timestamp=2019-09-25T00:00:00.000Z&indexType=MWA&indexId={BTC_USD_Market_Id} -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G
      ```

  - name: Authentication
    description: |
      BNC uses OAuth2 flows for security. When on-boarding to the BNC API platform for the first time, clients are provided with API credentials that allow them to be authenticated and authorised to make API calls. With these credentials a user may obtain an access token which must be submitted as a Header with each API request. The token will contain the information to permit the client to make the call and the scopes that define which endpoints will be accessible to them depending on their contract.

      ## Websocket API Authentication

      Our websocket endpoint requires the bearer token to be sent as *access_token* parameter in the connection url. The token will have to be used within 86400 seconds (24 hours) of being issued.

      ```
      wss://ws.bravenewcoin.com?access_token=<token>
      ```

      ## Rest API Authentication

      Our REST endpoints require a bearer token, valid for 24 hours, to be sent in the Authorization header.
      ```
      Authorization: Bearer <token>
      ```
      <!-- ReDoc-Inject: <security-definitions> -->

  - name: Introduction
    description: |
      Brave New Coin (BNC) has been providing data for the cryptographic asset marketplace since April 2014. BNC makes this data available through its API's. The V3 platform is the latest iteration, currently presenting market data but expanding to include indices, taxonomy and newsfeeds through a single interface. Access is either via REST or Websockets. In both cases authentication is by OAuth token. Contact support@bravenewcoin.com to obtain the API credentials.

      Market data includes the ticker data from over 200 exchanges representing the markets for more than 1500 crypto assets.

      BNC aggregates market prices from across exchanges to provide reference rates - the market weighted average (MWA) - for the 6000+ traded market pairs being tracked. These international market reference rates provide the basis to derive a single USD rate, the global weighted average (GWA), for each asset.

      Market data is available both as intraday values or as daily summaries (EOD) based on a midnight UTC close providing the open, high, low and close for the 24hr period. Intraday data is limited to a 200 day trailing window. Historic datasets covering the full history back to April 2014 are available on request by contacting support@bravenewcoin.com

      A typical interaction with an API endpoint might include:
      * A call to obtain an OAuth token based on client credentials.
      * A call to one of the lookups to get the UUID for an asset, market or an exchange.
      * A call to the API endpoint to get the response.

      The following sections provide further details about the general features of the API. You can jump to the [Quickstart](#tag/GWA) section if preferred or to the full details of the [REST API](#tag/Rest-API-Overview) or [Websocket](#tag/Websocket-Overview)

  - name: Support
    description: |
      The overall service status for Brave New Coin's platform including the APIs is visible [here](https://status.bravenewcoin.com/).

      If there any issues or problems arising from using the API's then please contact support@bravenewcoin.com and one of the team will reply within at most one working day if not immediately available.

  - name: IDs
    description: |
      BNC utilises UUIDs to identify entities such as assets, markets and exchanges. These UUIDs often provide the values for API endpoint parameters.

      The following resources are our informational API endpoints that can be queried to provide UUIDs:
      * [Asset](#tag/Asset): Identifier for an asset, coin or token. e.g. BTC, LTC, ETH etc.
      * [Market](#tag/Market): Identifier for a market on a crypto exchange. e.g. BTC/USD, BTC/ETH etc.
      * [Exchange](#tag/Exchange): Identifier for an exchange

  - name: Rest API Overview
    description: |
      Brave New Coin REST API exposes the following endpoints:
      * [GWA / MWA / LX](#tag/GWA-MWA-LX): Data from intraday API's is limited to a 200 day trailing window and refreshed every 30 seconds from June 1st, 2019.
      * [OHLCV](#tag/GWA-MWA-LX): OHLCV API's can provide the full historic dataset.
      * [Market Cap](#tag/Market-Cap): Latest ranking within the last 5 minutes.
      * [XchangeFeed](#tag/XchangeFeed): Standardized exchange market tickers updated every 30 seconds.

      There are currently no rate limits on API requests, but pagination is enforced on API responses to limit the payload of any one call. See [Pagination](#tag/Pagination)

      A sample Java API client project using the BNC REST API is available on Github :
      * [Java](https://github.com/bnc-projects/java-api-client)

      Please feel free to create issues and/or pull requests on Github if you would like to contribute to these projects.

      You can download the OpenAPI specification and generate your own clients if the language which you are working with is not found in the list. The download link can be found at the top of this page; and is available on [github](https://github.com/bnc-projects/web-api)


  - name: Websocket Overview
    description: |
      Brave New Coin Websocket API exposes the
      [LX](#tag/Websocket-LX) indices,
      [GWA / MWA](#tag/Websocket-GWA-MWA) indices,
      [trade data](#tag/Websocket-Trade-Data) (for selected markets) and [XchangeFeed](#tag/Websocket-XchangeFeed)
      (for all the exchanges and markets covered by BNC) via Websockets.
      Clients need to send a subscribe message to authenticate and start receiving data.

      A sample project using the BNC Websocket API is available on Github :

      * [Node.js](https://github.com/bnc-projects/bnc-websocket-client-sample)

      ### Connection URL

      `wss://ws.bravenewcoin.com?access_token=<token>`

      ### Authentication

      All websocket connections require authentication. For more information see -

      * [Authentication](#tag/Authentication)

      ### Common Message Types

      Websocket messages have an `event` field to identify them

      #### Connection Message

      Once the client connection is successful, the server will send back a connection message
      ```
      {
        "event" : "CONNECTED",
        "timestamp" : "2018-09-05T01:34:39Z"
      }
      ```

      #### Ping message

      Clients or server can send a ping request to check if the connection is active. Clients are expected to implement a `pong` response.
      The server may terminate the connection if the client does not respond to `ping` from the server.

      Request
      ```
      {
        "event": "PING",
        "requestId": 1
      }
      ```
      Response
      ```
      {
        "event": "PONG",
        "timestamp": "2018-09-05T01:34:39Z",
        "requestId": 1
      }
      ```

      A requestId is an optional field that users may include for their own benefit.

  - name: Websocket Errors
    description: |
      Server will return an error message in the below format
      ```
      {
        "event": "ERROR",
        "code": "400",
        "message": "Invalid event type provided",
        "timestamp": "2018-09-05T01:34:39Z"
      }
      ```
      ### Error code summary

      Error Code                         | Description
      -----------------------------------|------------
      400 - Bad Request                  | The request was unacceptable, often due to missing a required parameter.
      401 - Unauthorized                 | No valid OAuth2 token provided
      403 - Forbidden                    | Not authorized to access this resource (please contact sales about adding access to your profile).
      404 - Not Found                    | Requested resource not found (typically the marketId or exchangeId passed through the subscription request not found)

      There may be other types of errors that may be returned and we recommend handling the ERROR type gracefully.
  - name: Websocket XchangeFeed
    description: |

      This endpoint can be used to subscribe to the raw ticker data from different exchanges. Clients can send a Subscribe message to start receiving.



      To subscribe to all the ticks of an exchange only the exchangeId can be sent. To subscribe to all the ticks of an market only the marketId or marketName can be sent. Both exchangeId and marketId can be sent to subscribe to the market in an exchange. Clients can subscribe to multiple sources as required. Clients need to call the [Market](#tag/Market) and [Exchange](#tag/Exchange) REST API's to get the ids.

      ### Parameters

      Name                      | Description
      --------------------------|------------
      marketId                  | Subscribe to the exchange ticks for this market
      exchangeId                | Subscribe to the exchange ticks for this exchange
      marketName                | Subscribe to the exchange ticks for this exchange by the trade pair. e.g. BTC_USD. It is recommended to subscribe by the marketId rather than the marketName

      #### Subscribe to Exchange by Id

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "exchangeId": "359107d3-bd1a-418c-9470-58831ed9a45e"
      }
      ```

      #### Subscribe to Market by Id

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "marketId": "359107d3-bd1a-418c-9470-58831ed9a45e"
      }
      ```
      #### Subscribe to Market by Name

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "marketName": "BTC_USD"
      }
      ```
      #### Subscribe to a Market in an Exchange

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "exchangeId": "359107d3-bd1a-418c-9470-58831ed9a45e",
        "marketId": "f7cbc588-283e-41da-9c28-eee2113d7b8d"
      }
      ```
      #### Responses

      Subscription response
      ```
      {
        "event": "SUBSCRIBED_EXCHANGE_TICKER",
        "exchangeId": "359107d3-bd1a-418c-9470-58831ed9a45e",
        "marketId": "f7cbc588-283e-41da-9c28-eee2113d7b8d",
        "timestamp": "2020-06-25T05:01:17.429649Z"
      }
      ```

      The server will return ticks in this format
      ```
      {
        "event": "EXCHANGE_TICKER"
        "id": "string",
        "exchangeId": "string",
        "marketId": "string",
        "last": "string",
        "volume": "string",
        "bid": "string",
        "ask": "string",
        "timestamp": "2020-06-25T05:02:17.429649Z"
      }
      ```

      #### Unsubscribe
      To unsubscribe, the user should send a payload with the exact same body as the subscribe payload except the event becomes unsubscribe instead of subscribe
      ```
      {
        "event": "UNSUBSCRIBE_EXCHANGE_TICKER",
        "exchangeId": "359107d3-bd1a-418c-9470-58831ed9a45e",
        "marketId": "f7cbc588-283e-41da-9c28-eee2113d7b8d"
      }
      ```


    x-traitTag: true
  - name: Websocket LX
    description: |

      This websocket endpoint can be used to subscribe to [BNC's LX indices](https://bravenewcoin.com/enterprise-solutions/indices-program).
      Clients need to send a Subscribe message to start receiving. The LX Indices can be subscribed by the indexId or the indexType `LX`.
      The following table provides the available index Ids to subscribe to an LX index.

      | Index Type | Index Id  | Example Id | Description |
      | -----------| --------- | ---------- | ----------- |
      | LX         | Index Id  | 191724d4-7915-491b-8b73-bc293e03a93e | [BLX](https://bravenewcoin.com/data-and-charts/indices/blx) |
      | LX         | Index Id  | 6560acf3-1cb7-4fe4-aa19-fbd90c7b56ee | [ELX](https://bravenewcoin.com/data-and-charts/indices/elx) |
      | LX         | Index Id  | ce36445a-2a33-4a0f-8b5b-e56175f8db60 | [XRPLX](https://bravenewcoin.com/data-and-charts/indices/blx) |

      #### Subscribe by Index ID

      ```
      {
        "event": "SUBSCRIBE_INDEX_TICKER",
        "indexId": "191724d4-7915-491b-8b73-bc293e03a93e",
        "requestId" : 1
      }
      ```

      #### Subscribe by Index Type

      ```
      {
        "event": "SUBSCRIBE_INDEX_TICKER",
        "indexType": "LX",
        "requestId": 2
      }
      ```

      #### Responses

      Subscription response
      ```
      {
        "event": "SUBSCRIBED_INDEX_TICKER",
        "indexType": "LX",
        "timestamp": "2020-06-25T04:56:14.313516Z",
        "requestId": 2
      }
      ```

      The server will return ticks in this format
      ```
      {
        "event": "INDEX_TICKER"
        "id": "uuid",
        "indexId": "uuid",
        "indexType": "LX",
        "name": "string",
        "price": "string",
        "volume": "string",
        "tickVolume": "string",
        "timestamp": "2020-06-25T04:57:01.298745Z"
      }
      ```
      #### Unsubscribe
      To unsubscribe, the user should send a payload with the exact same body as the subscribe payload except the event becomes unsubscribe instead of subscribe. The requestId is a user option and isn't required.
      ```
      {
        "event": "UNSUBSCRIBE_INDEX_TICKER",
        "indexType": "LX",
        "requestId": 2
      }
      ```

    x-traitTag: true
  - name: Websocket GWA / MWA
    description: |

      This endpoint can be used to subscribe to the GWA / MWA data. These indices are calculated by BNC and published to the websocket endpoint. Clients need to send a Subscribe message to start receiving.
      Indices can be subscribed by the indexId or the indexType.

      The index id will differ based on the index type.

      | Index Type | Index Id  | Example Id | Description |
      | -----------| --------- | ---------- | ----------- |
      | MWA        | Market Id | 2e6d3ce9-9f30-464c-b73e-ba150d2dfb8a | MWA for XAUT_BTC |
      | GWA        | Asset Id  | 1490fca6-29f8-416a-835b-e9d000f26fd0 | GWA for [XAUT](https://bravenewcoin.com/data-and-charts/assets/XAUT/price) using the BNC asset Id for XAUT. |

      Clients need to call the [Market](#tag/Market) and [Asset](#tag/Asset) REST API's to get the ids.

      #### Subscribe by Index ID

      ```
      {
        "event": "SUBSCRIBE_INDEX_TICKER",
        "indexId": "1490fca6-29f8-416a-835b-e9d000f26fd0",
        "requestId" : 1
      }
      ```

      #### Subscribe by Index Type

      ```
      {
        "event": "SUBSCRIBE_INDEX_TICKER",
        "indexType": "MWA",
        "requestId": 2
      }
      ```

      #### Responses

      Subscription response
      ```
      {
        "event": "SUBSCRIBED_INDEX_TICKER",
        "indexType": "MWA",
        "timestamp": "2020-06-25T04:56:14.313516Z",
        "requestId": 2
      }
      ```

      The server will return ticks in this format
      ```
      {
        "event": "INDEX_TICKER"
        "id": "string",
        "indexId": "string",
        "indexType": "string",
        "price": "string",
        "volume": "string",
        "timestamp": "2020-06-25T04:57:01.298745Z"
      }
      ```
      #### Unsubscribe
      To unsubscribe, the user should send a payload with the exact same body as the subscribe payload except the event becomes unsubscribe instead of subscribe. The requestId is a user option and isn't required.
      ```
      {
        "event": "UNSUBSCRIBE_INDEX_TICKER",
        "indexId": "1490fca6-29f8-416a-835b-e9d000f26fd0",
        "requestId" : 1
      }
      ```


    x-traitTag: true
  - name: Rest API Errors
    description: |
      Brave New Coin uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g. A  required parameter was missing). Codes in the `5xx` range indicate an error with Brave New Coin's servers.

      Some `4xx` errors that could be handled programmatically include an error code that briefly explains the error reported.
      ```
      {
        "status": "BAD_REQUEST",
        "timestamp": "2018-08-14T21:55:46.055Z",
        "message": "validation error",
        "errors": [
          {
            "object": "Asset",
            "field": "status",
            "rejectedValue": "ERROR",
            "message": "Invalid value provided for status"
          }
        ]
      }
      ```

      ### HTTP status code summary
      HTTP Code                          | Description
      -----------------------------------|------------
      200 - OK                           | Everything worked as expected
      400 - Bad Request                  | The request was unacceptable, often due to missing a required parameter.
      401 - Unauthorized                 | No valid OAuth2 token provided
      403 - Forbidden 	                 | Not authorized to access this resource (please contact sales about adding access to your profile).
      404 - Not Found                    | The requested resource doesn't exist
      409 - Conflict                     | The request conflicts with another request (perhaps due the resource was updated)
      429 - Too Many Requests            | Too many requests hit the API too quickly. We recommend an expontential backoff of your requests.
      500, 502, 503, 504 - Server Errors | Something went wrong on Brave New Coin's end. (These will be rare).

      ### Handling Errors
      Our API libraries raise exceptions for many reasons, such as invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.
    x-traitTag: true
  - name: Pagination
    description: |
      All top-level API resources have support for bulk fetches via "list" API methods. For instance, you can list assets, list exchange tickers, and list GWA / MWA. These list API methods share a common structure, taking at least these three parameters: `size`, `timestamp` or `startAfter`.

      APIs which support query parameters timestamp and startAfter will provide paginated results when these query parameters are provided.

      Brave New Coin API's utilise cursor-based pagination using the `startAfter` parameter. The parameter should be an existing object ID and returns resources in reverse chronological order. The `startAfter` parameter returns resources listed after the named resource. For APIs which take both a `startAfter` and `timestamp` parameters, the `timestamp` is ignored if `startAfter` is provided.

      Arguments     |                         | Description
      --------------|-------------------------|------------
      size          | Optional, default is 10 | The number of resources to be returned, between 1 and 2000.
      startAfter    |                         | A cursor for use in pagination. startAfter is an resource ID that defines your place in the list.
      timestamp     |                         | The timestamp to start searching from going backwards in time.

      List Response Format | Description
      ---------------------|------------
      content              | An array containing the actual response elements, paginated by any request parameters.
      nextId               | The value to be provided in the `startAfter` to get the next page.

  - name: Timezones
    description: |
      Brave New Coin APIs will return datetime values in ISO8601 format. Datetime values are always returned in UTC time (as indicated by the `Z` at the end of the datetime value).

      Currently Brave New Coin APIs only accept datetimes in query parameters and request bodies which are in UTC.
  - name: Versioning
    description: |
      When we make backwards-incompatible changes to the API, we will release a new version. The current version is **v3**.

      The following changes are considered backwards-compatible:
        * Adding new API resources
        * Adding new optional request parameters to existing API methods
        * Adding new properties to existing API responses
        * Changing the order of properties in existing API responses
        * Changing the length or format of object IDs or other opaque strings

    x-traitTag: true
  - name: Asset
    description: Retrieve information about assets.
  - name: Market
    description: Retrieve information about markets.
  - name: Exchange
    description: Retrieve information about exchanges.
  - name: XchangeFeed
    description: |
      BNC’s XchangeFeed integrates and normalizes data feeds from multiple exchanges and delivers the data via a single API.

      The API allows you to query:
      * All the markets for an individual exchange
      * For a particular market on an individual exchange
      * For a particular market across all the exchanges that trades the pair
      * Returns all when unparameterized

      To obtain an Exchange Id or Market Id to use as a parameter for REST or Websocket, you need to query the Exchange or Market API respectively:
      * [Exchange](#tag/Exchange)
      * [Market](#tag/Market)
  - name: Market Weighted Averages
    description: Retrieve the market weighted averages.
  - name: Global Weighted Averages
    description: Retrieve the global weighted averages.
  - name: Open, High, Low, Close, Volumes
    description: Retrieve the open high low close volumes.
  - name: Market Cap
    description: |
      The Market Cap is calculated based on the free float (or circulating) supply figures and the GWA index price. The Total Market Cap is calculated based on the total supply and the GWA index price.

      If the percentChange parameter is set to true this API will also return movement in percentage of these values over a 24h, 7d or 30d period.
  - name: Convert
    description: Retrieve the conversion rates between assets.
paths:
  /oauth/token:
    post:
      tags:
        - Authentication
      summary: Client Credentials
      description: |
        This is the OAuth 2.0 grant that server processes utilize in order to access an API.
        Use this endpoint to directly request an Access Token by using the Client Credentials (a Client ID and a Client Secret).

        The BNC authentication endpoint is https://api.bravenewcoin.com/v3/oauth/token
      operationId: clientCredentials
      x-code-samples:
        - lang: Shell
          label: curl
          source: |
            curl -X POST https://api.bravenewcoin.com/v3/oauth/token -H 'Content-Type: application/json' -d '
            {
              "grant_type": "client_credentials",
              "client_id": "your client id",
              "client_secret": "your client secret",
              "audience": "https://api.bravenewcoin.com"
            }'
        - lang: JavaScript
          label: Node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'https://api.bravenewcoin.com/v3/oauth/token',
              headers: {
                'Content-Type': 'application/json'
              },
              body: {
                grant_type: 'client_credentials',
                client_id: 'your client id',
                client_secret: 'your client secret',
                audience: 'requested audience'
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) {
                throw new Error(error);
              }

              let access_token = body.access_token;
            });
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  description: Denotes the flow you are using. For Client Credentials use `client_credentials`.
                  type: string
                  example: client_credentials
                client_id:
                  description: Your application's Client ID.
                  type: string
                client_secret:
                  description: Your application's Client Secret.
                  type: string
                audience:
                  description: |
                    The unique identifier of the target API you want to access.

                    Audience                     | Description
                    -----------------------------|------------
                    https://api.bravenewcoin.com | Access the Rest API
                    wss://ws.bravenewcoin.com    | Subscribe to the Websocket Stream
                  type: string
                  example: https://api.bravenewcoin.com
      responses:
        '200':
          description: The authentication response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    description: The access token issued.
                    type: string
                  scope:
                    description: The scope issued.
                    type: string
                  expires_in:
                    description: The number of seconds in which the access token will expire.
                    type: integer
                  token_type:
                    description: The type of token type issued.
                    type: string
  /asset:
    get:
      tags:
        - Asset
      summary: List all assets
      description: List all assets or provide a query parameter to search.
      operationId: listAssets
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/asset/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: type
          in: query
          description: Only return assets of a particular type.
          required: false
          schema:
            type: string
            enum:
              - FIAT
              - CRYPTO
        - name: symbol
          in: query
          description: Only return assets which have a particular ticker symbol.
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Only return assets which have a particular status.
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
      responses:
        '200':
          description: An object with a `content` property that contains an array of assets. Each entry in the array is a seperate asset resource. If no assets are found then an empty object will be returned. This request should never return an error.
          content:
            application/json:
              schema:
                title: AssetResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
  '/asset/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Asset
      summary: Retrieve an asset
      description: Retrieves the details of an asset that has previously been created. Supply the unique identifier of the asset.
      operationId: getAssetById
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/asset/74182afb-c7ea-4856-a65d-a03ab5f72635 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      responses:
        '200':
          description: The asset which matches the UUID requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: The asset resource cannot be found.
  /market:
    get:
      tags:
        - Market
      summary: List all markets
      description: List all markets or provide a query parameter to search.
      operationId: listMarkets
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/market/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: baseAssetId
          in: query
          description: Only return markets which contain the asset id on the base side of the market.
          required: false
          schema:
            type: string
            format: uuid
        - name: quoteAssetId
          in: query
          description: Only return markets which contain the asset id on the quote side of the market.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: An object with a `content` property that contains an array of markets. Each entry in the array is a seperate market resource. If no markets are found then an empty object will be returned. This request should never return an error.
          content:
            application/json:
              schema:
                type: object
                title: MarketResponse
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Market'
  '/market/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Market
      summary: Retrieve a market
      description: Retrieves the details of a market that has previously been created. Supply the unique identifier of the market.
      operationId: getMarketById
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/market/74182afb-c7ea-4856-a65d-a03ab5f72635 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      responses:
        '200':
          description: The market which matches the UUID requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        '404':
          description: The market resource cannot be found.
  /exchange:
    get:
      tags:
        - Exchange
      summary: List all exchanges
      description: List all exchanges or provide a query parameter to search.
      operationId: listExchanges
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/exchange/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: status
          in: query
          description: Only return exchanges which have a particular status.
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
      responses:
        '200':
          description: An object with a `content` property that contains an array of exchanges. Each entry in the array is a seperate exchange resource. If no exchanges are found then an empty object will be returned. This request should never return an error.
          content:
            application/json:
              schema:
                title: ExchangeResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Exchange'
  '/exchange/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Exchange
      summary: Retrieve an exchange
      description: Retrieves the details of an exchange that has previously been created. Supply the unique identifier of the exchange.
      operationId: getExchangeById
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/exchange/74182afb-c7ea-4856-a65d-a03ab5f72635 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      responses:
        '200':
          description: The exchange which matched the UUID requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchange'
        '404':
          description: The exchange resource cannot be found.
  /exchange-ticker:
    get:
      tags:
        - XchangeFeed
      summary: List all exchange tickers
      security:
        - auth:
            - read:exchange-ticker
      description: |-
        This API provides ticker information by exchange and market.

        Using this API by **base and quote symbol is not recommended** as it may result in an error when duplicate symbols are found. Searching by marketId is recommended and will result in a faster response.
      operationId: listExchangeTicker
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/exchange-ticker/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: exchangeId
          in: query
          description: Retrieve all ticks for the particular exchange id provided.
          required: true
          schema:
            type: string
            format: uuid
        - name: marketId
          in: query
          description: Retrieve all ticks for the particular market id provided.
          required: true
          schema:
            type: string
            format: uuid
        - name: baseSymbol
          in: query
          description: Retrieve the ticks for the markets which contain the base symbol. If the base symbol is provided then the quote symbol must be provided.
          required: false
          schema:
            type: string
        - name: quoteSymbol
          in: query
          description: Retrieve the ticks for the markets which contain the quote symbol. If the quote symbol is provided, then the base symbol must be provided.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The ticker information by exchange id and market id
          content:
            application/json:
              schema:
                title: TickerResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tick'
                  nextId:
                    description: The next id which can be used as startAfter for pagination
                    type: string
                    format: uuid
  /index-ticker:
    get:
      tags:
        - GWA / MWA / LX
      summary: Get intraday
      security:
        - auth:
            - read:index-ticker
            - read:LX
      description: |
        This API provides support to get GWA or MWAs. A Type parameter is used
                to filter the type of index being returned.

        Currently the following types of indices are supported -

        | Index Type  | Description                  |
        | ------------|:----------------------------:|
        | MWA         | The Market weighted averages |
        | GWA         | The Global weighted averages |
        | LX          | Liquid Indices               |

        Each index type will have an index id which identifies the constituent type used to build the index -

        | Index Type | Index Id  | Output |
        | -----------|:---------:|:---------:|
        | MWA        | Market Id | The Market Weighted Average for that market       |
        | GWA        | Asset Id  | The Global Weighted Average for that coin / asset |
        | LX         | 191724d4-7915-491b-8b73-bc293e03a93e  | Bitcoin Liquid Index (BLX)  |
        | LX         | 6560acf3-1cb7-4fe4-aa19-fbd90c7b56ee  | Ethereum Liquid Index (ELX) |
        | LX         | ce36445a-2a33-4a0f-8b5b-e56175f8db60  | Ripple Liquid Index (XRPLX) |

        Clients are supposed to use this ID to call the other rest API's to get more information about the constituents
        used while building the index.

      operationId: getIndexTicker
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/index-ticker?indexId={index_id} -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: timestamp
          in: query
          description: |
            Retrieve all the indices up to the timestamp provided. If no timestamp is provided, then the most recent calculated value will be provided.
          required: false
          schema:
            type: string
            format: date-time
        - name: indexType
          in: query
          description: Retrieve the index by the type.
          required: false
          schema:
            type: string
            enum:
              - MWA
              - GWA
              - LX
        - name: indexId
          in: query
          description: |
            Retrieve all the indices by the particular index id. The index id will differ based on the index type.

            | Index Type | Index Id  | Description |
            | -----------|:---------:|:-----------:|
            | MWA        |Market Id  |             |
            | GWA        |Asset Id   |             |
            | LX         |191724d4-7915-491b-8b73-bc293e03a93e  | [BLX](https://bravenewcoin.com/data-and-charts/indices/blx) |
            | LX         |6560acf3-1cb7-4fe4-aa19-fbd90c7b56ee  | [ELX](https://bravenewcoin.com/data-and-charts/indices/elx) |
            | LX         |ce36445a-2a33-4a0f-8b5b-e56175f8db60  | [XRPLX](https://bravenewcoin.com/data-and-charts/indices/blx) |

          required: true
          schema:
            type: string
            format: uuid
        - name: startAfter
          in: query
          description: Retrieve all market weighted averages starting after this particular id.
          required: false
          schema:
            type: string
            format: uuid
        - name: size
          description: The maximum size to return in the result set. This parameter is ignored if no timestamp is provided.
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 2000
      responses:
        '200':
          description: The index ticker.
          content:
            application/json:
              schema:
                title: IndexTickerResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/IndexTicker'
                  nextId:
                    description: The next id which can be used as startAfter for pagination
                    type: string
                    format: uuid
  /ohlcv:
    get:
      tags:
        - GWA / MWA / LX
      summary: Get end of day Open, High, Low, Close, Volumes
      security:
        - auth:
            - read:ohlcv
            - read:LX
      description: |
        Get end of day open, high, low, close and volumes (OHLCV) for market weighted averages (MWA) or global weighted averages (GWA). The 24hr period for end of day is 00:00:00 UTC.

        This API provides the open, high, low, close and volume using the index type provided.

        Currently the following types of indices are supported -

        | Index Type  | Description                  |
        | ------------|:----------------------------:|
        | MWA         | The Market weighted averages |
        | GWA         | The Global weighted averages |
        | LX          | Liquid Indices               |

        Each index type will have an index id which identifies the constituent type used to build the index -

        | Index Type | Index Id  | Output |
        | -----------|:---------:|:---------:|
        | MWA        | Market Id | OHLCV for that market       |
        | GWA        | Asset Id  | OHLCV for that coin / asset |
        | LX         | 191724d4-7915-491b-8b73-bc293e03a93e  | OHLCV for Bitcoin Liquid Index (BLX)  |
        | LX         | 6560acf3-1cb7-4fe4-aa19-fbd90c7b56ee  | OHLCV for Ethereum Liquid Index (ELX) |
        | LX         | ce36445a-2a33-4a0f-8b5b-e56175f8db60  | OHLCV for Ripple Liquid Index (XRPLX) |


      operationId: listOhlcv
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/ohlcv?indexId={index_id} -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: timestamp
          in: query
          description: |
            Retrieve all MWA/GWA OHLCV up to the timestamp provided.
          required: false
          schema:
            type: string
            format: date-time
        - name: indexType
          in: query
          description: Retrieve the OHLCV end of day by the index type.
          required: false
          schema:
            type: string
            enum:
              - MWA
              - GWA
              - LX
        - name: indexId
          in: query
          description: |
            Retrieve all the OHLCV values by the particular index id. The index id will differ based on the index type.

            | Index Type | Index Id  | Description |
            | -----------|:---------:|:-----------:|
            | MWA        |Market Id  |             |
            | GWA        |Asset Id   |             |
            | LX         |191724d4-7915-491b-8b73-bc293e03a93e  | [BLX](https://bravenewcoin.com/data-and-charts/indices/blx) |
            | LX         |6560acf3-1cb7-4fe4-aa19-fbd90c7b56ee  | [ELX](https://bravenewcoin.com/data-and-charts/indices/elx) |
            | LX         |ce36445a-2a33-4a0f-8b5b-e56175f8db60  | [XRPLX](https://bravenewcoin.com/data-and-charts/indices/blx) |


          required: true
          schema:
            type: string
            format: uuid
        - name: interval
          in: query
          description: |
            The interval period.
          required: false
          schema:
            type: string
            default: 1d
            enum:
              - 1d
        - name: startAfter
          in: query
          description: Retrieve OHLCV for the indexId or indexType required, starting after this particular id.
          required: false
          schema:
            type: string
            format: uuid
        - name: size
          description: The maximum size to return in the result set. This parameter is ignored if no timestamp is provided.
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 2000
      responses:
        '200':
          description: 'The open, high, low, close and volume.'
          content:
            application/json:
              schema:
                title: OpenHighLowCloseVolumeResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/OpenHighLowCloseVolume'
                  nextId:
                    description: The next id which can be used as startAfter for pagination
                    type: string
                    format: uuid
  /market-cap:
    get:
      tags:
        - Market Cap
      summary: |
        List the market capitalisation for assets
      security:
        - auth:
            - read:market-cap
      description: |
        This API will return a list of assets ranked by their market capitalization.
      operationId: listMarketCaps
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/market-cap -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: assetId
          in: query
          description: The asset id to search
          required: false
          schema:
            type: string
            format: uuid
        - name: percentChange
          in: query
          description: Return the percent change in the response.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'Market Capitalization by assets'
          content:
            application/json:
              schema:
                title: MarketCapResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/MarketCap'
  /convert:
    get:
      tags:
        - Convert
      summary: Convert the value of one asset into another asset
      description: |
        Provides the ability to convert one asset into another asset.
      operationId: convertAsset
      parameters:
        - name: fromAssetId
          in: query
          description: The asset id to convert from
          required: true
          schema:
            type: string
            format: uuid
        - name: toAssetId
          in: query
          description: The asset id to convert to
          required: true
          schema:
            type: string
            format: uuid
        - name: amount
          in: query
          description: The amount of the asset to convert
          schema:
            type: string
            default: 1
      responses:
        '200':
          description: The rate and amount of the toAssetId
          content:
            application/json:
              schema:
                title: ConvertResponse
                type: object
                properties:
                  amount:
                    description: The amount of the to asset using the conversion rate
                    type: string
                  rate:
                    description: The rate used for the converstion
                    type: string
